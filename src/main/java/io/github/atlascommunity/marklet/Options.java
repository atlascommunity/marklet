package io.github.atlascommunity.marklet;

import jdk.javadoc.doclet.Doclet;
import lombok.Getter;
import lombok.NoArgsConstructor;

import java.util.*;


import static java.lang.Boolean.parseBoolean;

/**
 * Class that reads and stores provided options for javadoc execution. Options that we care about
 * are :
 *
 * <ul>
 *  <li>`-d` specifies the output directory (default: `javadocs`) </li>
 *  <li>`-e` specifies the file ending for files to be created (default `md`)</li>
 *  <li>`-l` specifies the file ending used in internal links
 * (default `md`)</li>
 * </ul>
 *
 * <p> The default options are ideal if you want to serve the documentation using GitHub's
 * built-in README rendering. If you are using a tool like Slate, change the options as follows: ```
 * $ javadoc -doclet fr.faylixe.marklet.Marklet -e html.md -l html â€¦ ```
 */

public final class Options {

  /** Option name for the source directory. (`-i`) * */
  public static final String SOURCE_DIRECTORY_OPTION = "-i";

  /** Option name for the target output directory. (`-d`) * */
  public static final String OUTPUT_DIRECTORY_OPTION = "-d";

  /** Option name for the file ending (`-e`) * */
  public static final String FILE_ENDING_OPTION = "-e";

  /** MarkletOption name for create badge flag (`-b`) * */
  public static final String CREATE_BADGE_OPTION = "-b";


  /** Default output directory to use. * */
  private static final String DEFAULT_OUTPUT_DIRECTORY = "javadoc/";


  /** Default source directory to use. * */
  private static final String DEFAULT_SOURCE_DIRECTORY = "src/main/java";

  /** Default output file ending (`md`) * */
  private static final String DEFAULT_FILE_ENDING = "md";

  private static final Map<String, MarkletOption> OPTIONS = new LinkedHashMap<>();

  /* Option registry **/
  static {
    OPTIONS.put(SOURCE_DIRECTORY_OPTION, new MarkletOption(
            List.of(SOURCE_DIRECTORY_OPTION),
            Doclet.Option.Kind.STANDARD,
            "directory",
            2,
            "The source directory.",
            DEFAULT_SOURCE_DIRECTORY));

    OPTIONS.put(OUTPUT_DIRECTORY_OPTION, new MarkletOption(
            List.of(OUTPUT_DIRECTORY_OPTION),
            Doclet.Option.Kind.STANDARD,
            "directory",
            2,
            "The target output directory.",
            DEFAULT_OUTPUT_DIRECTORY));

    OPTIONS.put(FILE_ENDING_OPTION, new MarkletOption(
            List.of(FILE_ENDING_OPTION),
            Doclet.Option.Kind.STANDARD,
            "suffix",
            2,
            "The file ending.",
            DEFAULT_FILE_ENDING));

    OPTIONS.put(CREATE_BADGE_OPTION, new MarkletOption(
            List.of(CREATE_BADGE_OPTION),
            Doclet.Option.Kind.STANDARD,
            "",
            1,
            "Create badge flag.",
            "false"));

  }


  /** Output directory file are generated in. * */
  public String getOutputDirectory() {
    return getOption(OUTPUT_DIRECTORY_OPTION).getValue();
  }

  /** Extension to use for generated file. * */
  public String getFileEnding() {
    return getOption(FILE_ENDING_OPTION).getValue().trim();
  }

  /** Add "generated by" badge to generated doc or not. * */
  public String getHasBadge() {
    return getOption(CREATE_BADGE_OPTION).getValue();
  }

  public static MarkletOption getOption(String key) {
    if (!OPTIONS.containsKey(key)) {
      return null;
    }
    return OPTIONS.get(key);
  }

  /** Default constructor. Sets options with their default parameters if available. */
  public Options() { }

  public static Set<Doclet.Option> getSupportedOptions() {
    return new LinkedHashSet<>(OPTIONS.values());
  }
}
